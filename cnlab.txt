ALL CODE TOGETHER


1) CHAT PROGRAMMING

SERVER CODE


#include <stdio.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h> // read(), write(), close()

#define MAX 80
#define PORT 8080
#define SA struct sockaddr

// Function designed for chat between client and server.
void func(int connfd) {
    char buff[MAX];
    int n;

    // infinite loop for chat
    for (;;) {
        bzero(buff, MAX);

        // read the message from client and copy it in buffer
        read(connfd, buff, sizeof(buff));

        // print buffer which contains the client contents
        printf("From client: %s\t To client : ", buff);

        bzero(buff, MAX);
        n = 0;

        // copy server message in the buffer
        while ((buff[n++] = getchar()) != '\n');

        // and send that buffer to client
        write(connfd, buff, sizeof(buff));

        // if msg contains "Exit" then server exit and chat ended.
        if (strncmp("exit", buff, 4) == 0) {
            printf("Server Exit...\n");
            break;
        }
    }
}

// Driver function
int main() {
    int sockfd, connfd, len;
    struct sockaddr_in servaddr, cli;

    // socket create and verification
    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    if (sockfd == -1) {
        printf("socket creation failed...\n");
        exit(0);
    } else {
        printf("Socket successfully created..\n");
    }

    bzero(&servaddr, sizeof(servaddr));

    // assign IP, PORT
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(PORT);

    // Binding newly created socket to given IP and verification
    if ((bind(sockfd, (SA*)&servaddr, sizeof(servaddr))) != 0) {
        printf("socket bind failed...\n");
        exit(0);
    } else {
        printf("Socket successfully binded..\n");
    }

    // Now server is ready to listen and verification
    if ((listen(sockfd, 5)) != 0) {
        printf("Listen failed...\n");
        exit(0);
    } else {
        printf("Server listening..\n");
    }

    len = sizeof(cli);

    // Accept the data packet from client and verification
    connfd = accept(sockfd, (SA*)&cli, &len);

    if (connfd < 0) {
        printf("server accept failed...\n");
        exit(0);
    } else {
        printf("server accept the client...\n");
    }

    // Function for chatting between client and server
    func(connfd);

    // After chatting close the socket
    close(sockfd);

    return 0;
}




CLIENT CODE

#include <arpa/inet.h>  // inet_addr()
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>  // bzero()
#include <sys/socket.h>
#include <unistd.h>  // read(), write(), close()

#define MAX 80
#define PORT 8080
#define SA struct sockaddr

void func(int sockfd) {
    char buff[MAX];
    int n;

    for (;;) {
        bzero(buff, sizeof(buff));
        printf("Enter the string : ");
        n = 0;

        while ((buff[n++] = getchar()) != '\n');

        write(sockfd, buff, sizeof(buff));

        bzero(buff, sizeof(buff));
        read(sockfd, buff, sizeof(buff));
        printf("From Server : %s", buff);

        if ((strncmp(buff, "exit", 4)) == 0) {
            printf("Client Exit...\n");
            break;
        }
    }
}

int main() {
    int sockfd, connfd;
    struct sockaddr_in servaddr, cli;

    // socket create and verification
    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    if (sockfd == -1) {
        printf("socket creation failed...\n");
        exit(0);
    } else {
        printf("Socket successfully created..\n");
    }

    bzero(&servaddr, sizeof(servaddr));

    // assign IP, PORT
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");
    servaddr.sin_port = htons(PORT);

    // connect the client socket to server socket
    if (connect(sockfd, (SA*)&servaddr, sizeof(servaddr)) != 0) {
        printf("connection with the server failed...\n");
        exit(0);
    } else {
        printf("connected to the server..\n");
    }

    // function for chat
    func(sockfd);

    // close the socket
    close(sockfd);

    return 0;
}















2)
CRC ERROR CORECTION AND DETECTION


CRC

// Include headers
#include<stdio.h>
#include<string.h>

// length of the generator polynomial
#define N strlen(gen_poly)

// data to be transmitted and received
char data[28];

// CRC value
char check_value[28];

// generator polynomial
char gen_poly[10];

// variables
int data_length, i, j;

// function that performs XOR operation
void XOR() {
    // if both bits are the same, the output is 0
    // if the bits are different the output is 1
    for(j = 1; j < N; j++) {
        check_value[j] = ((check_value[j] == gen_poly[j]) ? '0' : '1');
    }
}

int crc() {
    // initializing check_value
    for(i = 0; i < N; i++) {
        check_value[i] = data[i];
    }
    
    do {
        // check if the first bit is 1 and calls XOR function
        if(check_value[0] == '1') {
            XOR();
        }

        // Move the bits by 1 position for the next computation
        for(j = 0; j < N - 1; j++) {
            check_value[j] = check_value[j + 1];
        }

        // appending a bit from data
        check_value[j] = data[i++];
    } while(i <= data_length + N - 1);
    // loop until the data ends
}

// Function to check for errors on the receiver side
void receiver() {
    // get the received data
    printf("Enter the received data: ");
    scanf("%s", data);
    printf("\n-----------------------------\n");
    printf("Data received: %s", data);

    // Cyclic Redundancy Check
    crc();

    // Check if the remainder is zero to find the error
    for(i = 0; (i < N - 1) && (check_value[i] != '1'); i++);
    
    if(i < N - 1) {
        printf("\nError detected\n\n");
    } else {
        printf("\nNo error detected\n\n");
    }
}

int main() {
    // get the data to be transmitted
    printf("\nEnter data to be transmitted: ");
    scanf("%s", data);
    
    printf("\nEnter the Generating polynomial: ");
    // get the generator polynomial
    scanf("%s", gen_poly);
    
    // find the length of data
    data_length = strlen(data);

    // appending n-1 zeros to the data
    for(i = data_length; i < data_length + N - 1; i++) {
        data[i] = '0';
    }
    
    printf("\n----------------------------------------");
    
    // print the data with padded zeros
    printf("\n Data padded with n-1 zeros : %s", data);
    printf("\n----------------------------------------");
    
    // Cyclic Redundancy Check
    crc();
    
    // print the computed check value
    printf("\nCRC or Check value is : %s", check_value);
    
    // Append data with check_value(CRC)
    for(i = data_length; i < data_length + N - 1; i++) {
        data[i] = check_value[i - data_length];
    }
    
    printf("\n----------------------------------------");
    
    // printing the final data to be sent
    printf("\n Final data to be sent : %s", data);
    printf("\n----------------------------------------\n");
    
    // Calling the receiver function to check errors
    receiver();

    return 0;
}






3)
HAMMING CODE ERROR COORECTION AND DETECTION


#include<stdio.h>

void main() {
    int data[10];
    int dataatrec[10], c, c1, c2, c3, i;

    printf("Enter 4 bits of data one by one\n");
    scanf("%d", &data[0]);
    scanf("%d", &data[1]);
    scanf("%d", &data[2]);
    scanf("%d", &data[4]);

    // Calculation of even parity
    data[6] = data[0] ^ data[2] ^ data[4];
    data[5] = data[0] ^ data[1] ^ data[4];
    data[3] = data[0] ^ data[1] ^ data[2];

    printf("\nEncoded data is\n");
    for(i = 0; i < 7; i++)
        printf("%d", data[i]);

    printf("\n\nEnter received data bits one by one\n");

    for(i = 0; i < 7; i++)
        scanf("%d", &dataatrec[i]);

    c1 = dataatrec[6] ^ dataatrec[4] ^ dataatrec[2] ^ dataatrec[0];
    c2 = dataatrec[5] ^ dataatrec[4] ^ dataatrec[1] ^ dataatrec[0];
    c3 = dataatrec[3] ^ dataatrec[2] ^ dataatrec[1] ^ dataatrec[0];
    c = c3 * 4 + c2 * 2 + c1;

    if(c == 0) {
        printf("\nNo error while transmission of data\n");
    } else {
        printf("\nError on position %d", c);
        printf("\nData sent : ");
        for(i = 0; i < 7; i++)
            printf("%d", data[i]);

        printf("\nData received : ");
        for(i = 0; i < 7; i++)
            printf("%d", dataatrec[i]);

        printf("\nCorrect message is\n");

        // If errorneous bit is 0 we complement it else vice versa
        if(dataatrec[7 - c] == 0)
            dataatrec[7 - c] = 1;
        else
            dataatrec[7 - c] = 0;

        for (i = 0; i < 7; i++) {
            printf("%d", dataatrec[i]);
        }
    }
}






4)
CHECKSUM ERROR CORRECTION

#include<stdio.h>
#include<string.h>

int main() {
    char a[20], b[20];
    char sum[20], complement[20];
    int i, length;

    printf("Enter first binary string\n");
    scanf("%s", a);
    printf("Enter second binary string\n");
    scanf("%s", b);

    if (strlen(a) == strlen(b)) {
        length = strlen(a);
        char carry = '0';

        for (i = length - 1; i >= 0; i--) {
            if (a[i] == '0' && b[i] == '0' && carry == '0') {
                sum[i] = '0';
                carry = '0';
            } else if (a[i] == '0' && b[i] == '0' && carry == '1') {
                sum[i] = '1';
                carry = '0';
            } else if (a[i] == '0' && b[i] == '1' && carry == '0') {
                sum[i] = '1';
                carry = '0';
            } else if (a[i] == '0' && b[i] == '1' && carry == '1') {
                sum[i] = '0';
                carry = '1';
            } else if (a[i] == '1' && b[i] == '0' && carry == '0') {
                sum[i] = '1';
                carry = '0';
            } else if (a[i] == '1' && b[i] == '0' && carry == '1') {
                sum[i] = '0';
                carry = '1';
            } else if (a[i] == '1' && b[i] == '1' && carry == '0') {
                sum[i] = '0';
                carry = '1';
            } else if (a[i] == '1' && b[i] == '1' && carry == '1') {
                sum[i] = '1';
                carry = '1';
            } else {
                break;
            }
        }

        printf("\nSum=%c%s", carry, sum);

        for (i = 0; i < length; i++) {
            if (sum[i] == '0') {
                complement[i] = '1';
            } else {
                complement[i] = '0';
            }
        }

        if (carry == '1') {
            carry = '0';
        } else {
            carry = '1';
        }

        printf("\nChecksum=%c%s", carry, complement);
    } else {
        printf("\nWrong input strings");
    }

    return 0;
}





5)

SOCKET USING UDP

SERVER CODE

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>

#define PORT 8080
#define MAXLINE 1024

// Driver code
int main() {
    int sockfd;
    char buffer[MAXLINE];
    char *hello = "Hello from server";
    struct sockaddr_in servaddr, cliaddr;

    // Creating socket file descriptor
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));
    memset(&cliaddr, 0, sizeof(cliaddr));

    // Filling server information
    servaddr.sin_family = AF_INET; // IPv4
    servaddr.sin_addr.s_addr = INADDR_ANY;
    servaddr.sin_port = htons(PORT);

    // Bind the socket with the server address
    if (bind(sockfd, (const struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    int len, n;
    len = sizeof(cliaddr); // len is value/result

    n = recvfrom(sockfd, (char *)buffer, MAXLINE, MSG_WAITALL, (struct sockaddr *)&cliaddr, &len);
    buffer[n] = '\0';
    printf("Client : %s\n", buffer);

    sendto(sockfd, (const char *)hello, strlen(hello), MSG_CONFIRM, (const struct sockaddr *)&cliaddr, len);
    printf("Hello message sent.\n");

    return 0;
}



CLIENT CODE

// Client side implementation of UDP client-server model
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>

#define PORT 8080
#define MAXLINE 1024

// Driver code
int main() {
    int sockfd;
    char buffer[MAXLINE];
    char *hello = "Hello from client";
    struct sockaddr_in servaddr;

    // Creating socket file descriptor
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));

    // Filling server information
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(PORT);
    servaddr.sin_addr.s_addr = INADDR_ANY;

    int n, len;
    sendto(sockfd, (const char *)hello, strlen(hello),
           MSG_CONFIRM, (const struct sockaddr *)&servaddr,
           sizeof(servaddr));

    printf("Hello message sent.\n");

    n = recvfrom(sockfd, (char *)buffer, MAXLINE,
                 MSG_WAITALL, (struct sockaddr *)&servaddr,
                 &len);
    buffer[n] = '\0';
    printf("Server : %s\n", buffer);

    close(sockfd);

    return 0;
}







6)

DISKITRA ROUTING PROTOCOL


#include<stdio.h>
#include<conio.h>
#define INFINITY 9999
#define MAX 10

void dijkstra(int G[MAX][MAX], int n, int startnode);

int main() {
    int G[MAX][MAX], i, j, n, u;
    printf("Enter no. of vertices:");
    scanf("%d", &n);
    printf("\nEnter the adjacency matrix:\n");

    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &G[i][j]);

    printf("\nEnter the starting node:");
    scanf("%d", &u);
    dijkstra(G, n, u);

    return 0;
}

void dijkstra(int G[MAX][MAX], int n, int startnode) {
    int cost[MAX][MAX], distance[MAX], pred[MAX];
    int visited[MAX], count, mindistance, nextnode, i, j;

    // pred[] stores the predecessor of each node
    // count gives the number of nodes seen so far
    // create the cost matrix
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            if (G[i][j] == 0)
                cost[i][j] = INFINITY;
            else
                cost[i][j] = G[i][j];

    // initialize pred[], distance[], and visited[]
    for (i = 0; i < n; i++) {
        distance[i] = cost[startnode][i];
        pred[i] = startnode;
        visited[i] = 0;
    }

    distance[startnode] = 0;
    visited[startnode] = 1;
    count = 1;

    while (count < n - 1) {
        mindistance = INFINITY;
        // nextnode gives the node at minimum distance
        for (i = 0; i < n; i++)
            if (distance[i] < mindistance && !visited[i]) {
                mindistance = distance[i];
                nextnode = i;
            }

        // check if a better path exists through nextnode
        visited[nextnode] = 1;
        for (i = 0; i < n; i++)
            if (!visited[i])
                if (mindistance + cost[nextnode][i] < distance[i]) {
                    distance[i] = mindistance + cost[nextnode][i];
                    pred[i] = nextnode;
                }

        count++;
    }

    // print the path and distance of each node
    for (i = 0; i < n; i++)
        if (i != startnode) {
            printf("\nDistance of node %d = %d", i, distance[i]);
            printf("\nPath = %d", i);
            j = i;

            do {
                j = pred[j];
                printf("<-%d", j);
            } while (j != startnode);
        }
}






7)

STOP AND WAIT FLOW CONTROL

SERVER WINDOW 


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 12345
#define BUFFER_SIZE 1024

void die(char *s) {
    perror(s);
    exit(1);
}

int main() {
    int sockfd, newsockfd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);
    char buffer[BUFFER_SIZE];

    // Create socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        die("socket");
    }

    // Initialize server address structure
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    // Bind socket to server address
    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        die("bind");
    }

    printf("Server waiting for messages...\n");

    while (1) {
        // Receive message from client
        ssize_t recv_len = recvfrom(sockfd, buffer, BUFFER_SIZE, 0, (struct sockaddr *)&client_addr, &client_len);

        if (recv_len == -1) {
            die("recvfrom");
        }

        buffer[recv_len] = '\0';
        printf("Received: %s\n", buffer);

        // Acknowledge the receipt of the message
        sendto(sockfd, "ACK", 3, 0, (struct sockaddr *)&client_addr, client_len);
    }

    close(sockfd);
    return 0;
}


CLIENT CODE


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 12345
#define BUFFER_SIZE 1024

void die(char *s) {
    perror(s);
    exit(1);
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE];

    // Create socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        die("socket");
    }

    // Initialize server address structure
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVER_PORT);

    if (inet_aton(SERVER_IP, &server_addr.sin_addr) == 0) {
        fprintf(stderr, "Invalid IP address\n");
        exit(1);
    }

    while (1) {
        printf("Enter message to send (or 'exit' to quit): ");
        fgets(buffer, BUFFER_SIZE, stdin);

        // Send message to server
        ssize_t send_len = sendto(sockfd, buffer, strlen(buffer), 0, (struct sockaddr *)&server_addr, sizeof(server_addr));

        if (send_len == -1) {
            die("sendto");
        }

        // Receive acknowledgment from the server
        char ack[3];
        ssize_t recv_len = recvfrom(sockfd, ack, sizeof(ack), 0, NULL, NULL);

        if (recv_len == -1) {
            die("recvfrom");
        }

        ack[recv_len] = '\0';
        printf("Received ACK: %s\n", ack);

        if (strncmp(buffer, "exit", 4) == 0) {
            break;
        }
    }

    close(sockfd);
    return 0;
}







8)


GO BACK ARQ FLOW CONTROL

SERVER WINDOW

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 12345
#define WINDOW_SIZE 4
#define BUFFER_SIZE 1024

void die(char *s) {
    perror(s);
    exit(1);
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);
    char buffer[BUFFER_SIZE];

    // Create socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        die("socket");
    }

    // Initialize server address structure
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    // Bind socket to server address
    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        die("bind");
    }

    printf("Server waiting for messages...\n");

    int expected_seq_num = 0;

    while (1) {
        // Receive message from client
        ssize_t recv_len = recvfrom(sockfd, buffer, BUFFER_SIZE, 0, (struct sockaddr *)&client_addr, &client_len);

        if (recv_len == -1) {
            die("recvfrom");
        }

        buffer[recv_len] = '\0';

        // Extract sequence number from the message
        int seq_num;
        char data[BUFFER_SIZE];

        if (sscanf(buffer, "%d%s", &seq_num, data) != 2) {
            fprintf(stderr, "Error parsing message: %s\n", buffer);
            continue; // Skip invalid message
        }

        // Check if the received sequence number is as expected
        if (seq_num == expected_seq_num) {
            printf("Received: %s\n", buffer);
            expected_seq_num = (expected_seq_num + 1) % WINDOW_SIZE;
        }

        // Acknowledge the receipt of the message
        char ack[32]; // Make sure it's large enough for your needs
        snprintf(ack, sizeof(ack), "ACK%d", seq_num);
        sendto(sockfd, ack, strlen(ack), 0, (struct sockaddr *)&client_addr, client_len);
    }

    close(sockfd);
    return 0;
}



CLIENT CODE



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 12345
#define WINDOW_SIZE 4
#define BUFFER_SIZE 1024

void die(char *s) {
    perror(s);
    exit(1);
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE];

    // Create socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        die("socket");
    }

    // Initialize server address structure
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVER_PORT);

    if (inet_aton(SERVER_IP, &server_addr.sin_addr) == 0) {
        fprintf(stderr, "Invalid IP address\n");
        exit(1);
    }

    int next_seq_num = 0;

    while (1) {
        printf("Enter message to send (or 'exit' to quit): ");
        fgets(buffer, BUFFER_SIZE - 10, stdin); // Reserve space for sequence number

        if (strcmp(buffer, "exit\n") == 0) {
            break; // Exit the loop and terminate the client
        }

        // Send message to server
        if (next_seq_num < WINDOW_SIZE) {
            printf("Sending: %d\n", next_seq_num);
            int chars_written = snprintf(buffer, BUFFER_SIZE - 1, "%d %s", next_seq_num, buffer);

            // Include sequence number
            if (chars_written >= BUFFER_SIZE - 1) {
                fprintf(stderr, "Message is too long. Truncating.\n");
                buffer[BUFFER_SIZE - 1] = '\0'; // Ensure null-termination
            }

            sendto(sockfd, buffer, strlen(buffer), 0, (struct sockaddr *)&server_addr, sizeof(server_addr));
            next_seq_num++;
        }

        // Receive acknowledgment from the server
        char ack[32]; // Make sure it's large enough for your needs
        ssize_t recv_len = recvfrom(sockfd, ack, sizeof(ack), 0, NULL, NULL);

        if (recv_len == -1) {
            die("recvfrom");
        }

        ack[recv_len] = '\0';
        int ack_num;
        sscanf(ack, "ACK%d", &ack_num);
        printf("Received ACK: %d\n", ack_num);

        if (next_seq_num >= WINDOW_SIZE) {
            // All packets in the window have been sent, so reset the sequence number
            next_seq_num = 0;
        }
    }

    close(sockfd);
    return 0;
}







9)

SLIDING WINDOW FLOW CONTROL

SERVER CODE

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 12345
#define BUFFER_SIZE 1024
#define WINDOW_SIZE 4

void die(char *s) {
    perror(s);
    exit(1);
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);
    char buffer[BUFFER_SIZE];

    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        die("socket");
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        die("bind");
    }

    printf("Server waiting for messages...\n");

    int expected_seq_num = 0;

    while (1) {
        ssize_t recv_len = recvfrom(sockfd, buffer, BUFFER_SIZE, 0, (struct sockaddr *)&client_addr, &client_len);

        if (recv_len == -1) {
            die("recvfrom");
        }

        buffer[recv_len] = '\0';

        int seq_num;
        char data[BUFFER_SIZE];

        if (sscanf(buffer, "%d%s", &seq_num, data) != 2) {
            fprintf(stderr, "Error parsing message: %s\n", buffer);
            continue; // Skip invalid message
        }

        if (seq_num == expected_seq_num) {
            printf("Received: %s\n", buffer);
            expected_seq_num = (expected_seq_num + 1) % (2 * WINDOW_SIZE);
        }

        char ack[32];
        snprintf(ack, sizeof(ack), "ACK%d", seq_num);
        sendto(sockfd, ack, strlen(ack), 0, (struct sockaddr *)&client_addr, client_len);
    }

    close(sockfd);
    return 0;
}


CLIENT CODE


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 12345
#define BUFFER_SIZE 1024
#define WINDOW_SIZE 4

void die(char *s) {
    perror(s);
    exit(1);
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE];

    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        die("socket");
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVER_PORT);

    if (inet_aton(SERVER_IP, &server_addr.sin_addr) == 0) {
        fprintf(stderr, "Invalid IP address\n");
        exit(1);
    }

    int next_seq_num = 0;

    while (1) {
        printf("Enter message to send (or 'exit' to quit): ");
        fgets(buffer, BUFFER_SIZE - 10, stdin);

        if (strcmp(buffer, "exit\n") == 0) {
            break;
        }

        if (next_seq_num < WINDOW_SIZE) {
            printf("Sending: %d\n", next_seq_num);
            int chars_written = snprintf(buffer, BUFFER_SIZE - 1, "%d %s", next_seq_num, buffer);

            if (chars_written >= BUFFER_SIZE - 1) {
                fprintf(stderr, "Message is too long. Truncating.\n");
                buffer[BUFFER_SIZE - 1] = '\0';
            }

            sendto(sockfd, buffer, strlen(buffer), 0, (struct sockaddr *)&server_addr, sizeof(server_addr));
            next_seq_num++;
        }

        char ack[32];
        ssize_t recv_len = recvfrom(sockfd, ack, sizeof(ack), 0, NULL, NULL);

        if (recv_len == -1) {
            die("recvfrom");
        }

        ack[recv_len] = '\0';
        int ack_num;
        sscanf(ack, "ACK%d", &ack_num);
        printf("Received ACK: %d\n", ack_num);

        if (next_seq_num >= WINDOW_SIZE) {
            next_seq_num = 0;
        }
    }

    close(sockfd);
    return 0;
}









10)



SELECTIVE REPEAT FLOW CONTROL


SERVER WINDOW

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 12345
#define BUFFER_SIZE 1024
#define WINDOW_SIZE 4

void die(char *s) {
    perror(s);
    exit(1);
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);
    char buffer[BUFFER_SIZE];

    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        die("socket");
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        die("bind");
    }

    printf("Server waiting for messages...\n");

    int base = 0;
    int next_seq_num = 0;

    while (1) {
        ssize_t recv_len = recvfrom(sockfd, buffer, BUFFER_SIZE, 0, (struct sockaddr *)&client_addr, &client_len);

        if (recv_len == -1) {
            die("recvfrom");
        }

        buffer[recv_len] = '\0';

        int seq_num;
        char data[BUFFER_SIZE];

        if (sscanf(buffer, "%d%s", &seq_num, data) != 2) {
            fprintf(stderr, "Error parsing message: %s\n", buffer);
            continue; // Skip invalid message
        }

        if (seq_num >= base && seq_num < base + WINDOW_SIZE) {
            printf("Received: %s\n", buffer);

            // Simulate processing the received data
            // (You may want to replace this with actual processing)
            // ...

            // Send acknowledgment
            char ack[32];
            snprintf(ack, sizeof(ack), "ACK%d", seq_num);
            sendto(sockfd, ack, strlen(ack), 0, (struct sockaddr *)&client_addr, client_len);

            // Update base if the received frame is the one expected
            if (seq_num == base) {
                while (1) {
                    base++;
                    if (base < next_seq_num - WINDOW_SIZE)
                        break;
                }
            }
        }
    }

    close(sockfd);
    return 0;
}




CLIENT WINDOW


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 12345
#define BUFFER_SIZE 1024
#define WINDOW_SIZE 4

void die(char *s) {
    perror(s);
    exit(1);
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE];

    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        die("socket");
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVER_PORT);

    if (inet_aton(SERVER_IP, &server_addr.sin_addr) == 0) {
        fprintf(stderr, "Invalid IP address\n");
        exit(1);
    }

    int next_seq_num = 0;
    int sent_count = 0;

    while (1) {
        if (next_seq_num < sent_count + WINDOW_SIZE) {
            printf("Sending: %d\n", next_seq_num);
            int chars_written = snprintf(buffer, BUFFER_SIZE - 1, "%d Message", next_seq_num);

            if (chars_written >= BUFFER_SIZE - 1) {
                fprintf(stderr, "Message is too long. Truncating.\n");
                buffer[BUFFER_SIZE - 1] = '\0';
            }

            sendto(sockfd, buffer, strlen(buffer), 0, (struct sockaddr *)&server_addr, sizeof(server_addr));
            next_seq_num++;
            sent_count++;
        }

        // Simulate timeout and retransmission
        // (You may want to replace this with actual timeout handling)
        sleep(2);
    }

    close(sockfd);
    return 0;
}







11)




SOCKET WITHOUT UDP

SERVER WINDOW

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 12345
#define BUFFER_SIZE 1024

void die(char *s) {
    perror(s);
    exit(EXIT_FAILURE);
}

int main() {
    int server_socket, client_socket;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_addr_len = sizeof(client_addr);
    char buffer[BUFFER_SIZE];

    // Create socket
    if ((server_socket = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        die("socket");
    }

    // Initialize server address structure
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    // Bind socket to server address
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        die("bind");
    }

    // Listen for incoming connections
    if (listen(server_socket, 5) == -1) {
        die("listen");
    }

    printf("Server listening on port %d...\n", PORT);

    // Accept a connection from the client
    if ((client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_addr_len)) == -1) {
        die("accept");
    }

    printf("Client connected: %s\n", inet_ntoa(client_addr.sin_addr));

    // Receive data from the client
    ssize_t recv_len = recv(client_socket, buffer, BUFFER_SIZE, 0);

    if (recv_len == -1) {
        die("recv");
    }

    buffer[recv_len] = '\0';
    printf("Received message from client: %s\n", buffer);

    // Send a response back to the client
    const char *response = "Hello from the server!";
    send(client_socket, response, strlen(response), 0);

    // Close sockets
    close(client_socket);
    close(server_socket);

    return 0;
}





CLIENT


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define SERVER_IP "127.0.0.1"
#define PORT 12345
#define BUFFER_SIZE 1024

void die(char *s) {
    perror(s);
    exit(EXIT_FAILURE);
}

int main() {
    int client_socket;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE];

    // Create socket
    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        die("socket");
    }

    // Initialize server address structure
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);

    // Convert IP address from text to binary form
    if (inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr) <= 0) {
        die("inet_pton");
    }

    // Connect to the server
    if (connect(client_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        die("connect");
    }

    // Send a message to the server
    const char *message = "Hello from the client!";
    send(client_socket, message, strlen(message), 0);

    // Receive a response from the server
    ssize_t recv_len = recv(client_socket, buffer, BUFFER_SIZE, 0);

    if (recv_len == -1) {
        die("recv");
    }

    buffer[recv_len] = '\0';
    printf("Received response from server: %s\n", buffer);

    // Close the socket
    close(client_socket);

    return 0;
}




